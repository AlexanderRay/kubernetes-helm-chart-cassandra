kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "kubernetes.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "kubernetes.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  run_override.sh: |-
    #/bin/sh

    export CLUSTER_DOMAIN=$(hostname -d | awk -F"." '{print $(NF-1),".",$NF}' | sed 's/ //g')
    export CASSANDRA_DC=$(echo $CLUSTER_DOMAIN | sed 's/.local//')
    export CASSANDRA_SEEDS={{ template "kubernetes.name" . }}-0.{{ template "kubernetes.name" . }}.{{ .Release.Namespace }}.svc.$CLUSTER_DOMAIN,{{ template "kubernetes.name" . }}-1.{{ template "kubernetes.name" . }}.{{ .Release.Namespace }}.svc.$CLUSTER_DOMAIN

    /run.sh
  postStart.sh: |-
    #!/bin/sh

    until /ready-probe.sh ; do
      echo "Waiting node to be ready"
      sleep 1
    done

    nohup /usr/local/apache-cassandra/scripts/repair.sh &
    exit 0
  preStop.sh: |-
    #!/bin/sh

    run_nodetool() {
      echo "Running: nodetool $1"
      /usr/local/apache-cassandra/bin/nodetool $1
      sleep 5
    }

    while [ $(/usr/local/apache-cassandra/bin/nodetool status | awk "/$CASSANDRA_RACK/{ print \$1,\$2 }" | grep -v $POD_IP | awk '{ print $1 }' | grep -v UN) -eq 0 ] ; do
      echo "Waiting all nodes to recover a correct status before draining this node"
      sleep 5
      pidof java || exit 1
    done

    run_nodetool disablethrift
    run_nodetool disablebinary
    run_nodetool disablegossip
    run_nodetool flush
    run_nodetool drain
    sleep 10
    run_nodetool stop
    run_nodetool stopdaemon

    exit 0
  repair.sh: |-
    while [ $(/usr/local/apache-cassandra/bin/nodetool status | grep '^UN' | wc -l) -ne {{ .Values.cassandraReplicaCount }} ] ; then
      sleep 10
    fi
    sleep $[ ( $RANDOM % 1800 )  + 1 ]s
    /usr/local/apache-cassandra/bin/nodetool repair